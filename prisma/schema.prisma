datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// App models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
  plan          Plan            @default(FREE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String   @id @default(cuid())
  name            String
  noteText        String?
  informationText String?
  reviewText      String?
  thanksText      String?
  backgroundColor String?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews         Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String      @id @default(cuid())
  rating     Int
  text       String?
  // Audio URL
  audio      String?
  socialLink String?
  socialType SocialType?
  // Image and name getting from social
  name       String?
  image      String?
  ip         String?
  productId  String
  Product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SocialType {
  LINKEDIN
  TWITTER
}
